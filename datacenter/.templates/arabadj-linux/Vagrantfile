# -*- mode: ruby -*-
# vi: set ft=ruby :

#====================================================================================================================================

Vagrant.configure("2") do |config|

#------------------------------------------------------------------------------------------------------------------------------------

  config.vm.box_check_update = false

  config.vm.box = "#{ENV.fetch("VAGRANT_IMAGE_NAME")}"

  if "#{ENV.fetch("VAGRANT_IMAGE_VERSION")}" != ""
    config.vm.box_version = "#{ENV.fetch("VAGRANT_IMAGE_VERSION")}"
  end

  config.vm.synced_folder '.', '/vagrant', disabled: true

  if "#{ENV.fetch("VAGRANT_SYNCED_FOLDERS")}" == "yes"
    config.vm.synced_folder "#{ENV.fetch("SCRIPTS_ROOT")}", "/cmd", 
      owner: "root", group: "root", mount_options: ["dmode=755,fmode=755"]

    config.vm.synced_folder "./folder", "/folder", 
      owner: "root", group: "root", mount_options: ["dmode=755,fmode=644"]
  end

#------------------------------------------------------------------------------------------------------------------------------------

  config.vm.hostname = "#{ENV.fetch("VAGRANT_HOST_NAME")}"
  config.vm.provider "virtualbox" do |vb|
    vb.name = "#{ENV.fetch("VAGRANT_HOST_NAME")}"
    vb.memory = 4096
    vb.cpus = 4
    vb.customize ["modifyvm", :id, "--natnet1", "#{ENV.fetch("VAGRANT_SUBNET_NAT")}"]
    # vb.customize ["modifyvm", :id, "--audio", "none"]
    vb.customize ["modifyvm", :id, "--audio", "dsound", "--audiocontroller", "ac97"]
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
    if "#{ENV.fetch("VAGRANT_PROVISION_DESKTOP")}" == "yes"
      vb.gui = true
    end
  end

#------------------------------------------------------------------------------------------------------------------------------------

  config.vm.network :forwarded_port, guest: 22, host: "#{ENV.fetch("VAGRANT_SSH_PORT")}", id: "ssh"
  config.vm.network "private_network", ip: "#{ENV.fetch("VAGRANT_IPADDR_PRIVATE")}"
  config.vm.network "public_network",
    use_dhcp_assigned_default_route: true

  config.vm.provision "route_nat", type: "shell", run: "always", inline: <<-ROUTE
    ip route del default via $(ip route ls | grep default | grep eth2 | grep dhcp | awk '{print $3}') dev eth2 metric 75 &> /dev/null 
    ip route rep default via $(ip route ls | grep default | grep eth0 | grep dhcp | awk '{print $3}') dev eth0 metric 75 &> /dev/null
    echo IP: $(ip addr ls | grep global | awk '{print $2" "}' | cut -d "/" -f 1)
    echo GW: $(ip route ls | head -1 | awk '{print $3}')
    ROUTE

  config.vm.provision "route_bridge", type: "shell", run: "never", inline: <<-ROUTE
    ip route del default via $(ip route ls | grep default | grep eth0 | grep dhcp | awk '{print $3}') dev eth0 metric 75 &> /dev/null 
    ip route rep default via $(ip route ls | grep default | grep eth2 | grep dhcp | awk '{print $3}') dev eth2 metric 75 &> /dev/null
    echo IP: $(ip addr ls | grep global | awk '{print $2" "}' | cut -d "/" -f 1)
    echo GW: $(ip route ls | head -1 | awk '{print $3}')
    ROUTE

  config.vm.provision "firewall_status", type: "shell", run: "always", inline: <<-FIREWALL
    iptables -L INPUT -nv
    FIREWALL

#------------------------------------------------------------------------------------------------------------------------------------

  config.ssh.forward_agent = true
  config.ssh.insert_key = false
  config.ssh.private_key_path = ["#{ENV.fetch("VAGRANT_SSH_INSECURE_KEY")}", "#{ENV.fetch("VAGRANT_SSH_PRIVATE_KEY")}"] 
  config.vm.provision "file", source: "#{ENV.fetch("VAGRANT_SSH_PUBLIC_KEY")}", destination: "~/.ssh/authorized_keys"

#------------------------------------------------------------------------------------------------------------------------------------
  
  if "#{ENV.fetch("VAGRANT_PROVISION_BOOTSTRAP")}" == "yes"
    config.vm.provision "bootstrap", type: "ansible" do |ansible|
      ansible.playbook = "#{ENV.fetch("PLAYS_ROOT")}/bootstrap.yml"
    end
  end

  if "#{ENV.fetch("VAGRANT_PROVISION_FIREWALL")}" == "yes"
    config.vm.provision "firewall", type: "ansible" do |ansible|
      ansible.playbook = "#{ENV.fetch("PLAYS_ROOT")}/firewall.yml"
    end
  end

  if "#{ENV.fetch("VAGRANT_PROVISION_USRSTRAP")}" == "yes"
    config.vm.provision "usrstrap", type: "ansible" do |ansible|
      ansible.playbook = "#{ENV.fetch("PLAYS_ROOT")}/usrstrap.yml"
    end
  end

  if "#{ENV.fetch("VAGRANT_PROVISION_LOCALSTRAP")}" == "yes"
    config.vm.provision "localstrap", type: "ansible" do |ansible|
      ansible.playbook = "#{ENV.fetch("PLAYS_ROOT")}/localstrap.yml"
    end
  end

  if "#{ENV.fetch("VAGRANT_PROVISION_HOMESTRAP")}" == "yes"
    config.vm.provision "homestrap", type: "ansible" do |ansible|
      ansible.playbook = "#{ENV.fetch("PLAYS_ROOT")}/homestrap.yml"
    end
  end

  config.vm.provision "work", run: "never", type: "ansible" do |ansible|
    ansible.playbook = "#{ENV.fetch("PLAYS_ROOT")}/work.yml"
  end

  if "#{ENV.fetch("VAGRANT_PROVISION_DESKTOP")}" == "yes"
    config.vm.provision "desktop", type: "ansible" do |ansible|
      ansible.playbook = "#{ENV.fetch("PLAYS_ROOT")}/desktop.yml"
    end
  end

  config.vm.provision "information", run: "never", type: "ansible" do |ansible|
    ansible.playbook = "#{ENV.fetch("PLAYS_ROOT")}/information.yml"
  end

#------------------------------------------------------------------------------------------------------------------------------------

end

#====================================================================================================================================
