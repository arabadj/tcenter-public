#!/bin/bash

#===========================================================================================================================

REALPATH="$(realpath $0)"
BASENAME="$(basename $REALPATH)"
DIRNAME="$(dirname $REALPATH)"

cd $DIRNAME

#===========================================================================================================================
while [ -z "$GLOBAL_ROOT" ]; do
    [ -f ./global.env ] && export GLOBAL_ROOT=$(pwd) && source ./global.env
    [ "$(pwd)" == "/" ] && echo "Unknown \$GLOBAL_ROOT, terminating..." && exit 0; cd ..; done
for FUNCTION in $(cat $GLOBAL_ROOT/global.env | grep "^function" | awk '{print $2}'); do 
    export -f $FUNCTION; done
#===========================================================================================================================

if [ -x /usr/bin/figlet ]; then
  ECHO="/usr/bin/figlet"
else
  ECHO="/bin/echo"
fi

$ECHO $BASENAME
echo "$(echo $GLOBAL_ROOT | rev | cut -d '/' -f 1 | rev)"
echo ""
echo ""

#===========================================================================================================================

function print_usage () {
  echo ""
  echo "Usage:"
  echo "        tcenter-$DEPLOYMENT list"
  echo "        tcenter-$DEPLOYMENT templates"
  echo "        tcenter-$DEPLOYMENT new <name> <template>"
  echo "        tcenter-$DEPLOYMENT edit <name>"
  echo "        tcenter-$DEPLOYMENT actions <name>"
  echo "        tcenter-$DEPLOYMENT provision <name>"
  echo "        tcenter-$DEPLOYMENT remove <name>"
  echo "        tcenter-$DEPLOYMENT link"
  echo "        tcenter-$DEPLOYMENT unlink"
  echo "        tcenter-$DEPLOYMENT share <name>"
  echo "        tcenter-$DEPLOYMENT unshare <name>"
  echo ""
}

#---------------------------------------------------------------------------------------------------------------------------

function localhost_actions_list () {
  ls "$LOCALHOST_ROOT/runs" | grep ".sh" | cut -d "." -f 1 
}

function localhost_instance () {
  INSTANCE_ACTION_LIST="$(localhost_actions_list)"
  for a in $INSTANCE_ACTION_LIST; do
    [ "$a" == "$INSTANCE_ACTION" ] && INSTANCE_ACTION_EXISTS="true"
  done
  if [ "$INSTANCE_ACTION_EXISTS" ]; then
    $LOCALHOST_ROOT/runs/$INSTANCE_ACTION.sh 2>/dev/null
  else
    echo ""
    echo "Instance \"localhost\" Actions:"
    echo ""
    localhost_actions_list
    echo ""
    # print_usage
    echo ""
  fi
}

function vgr_instance_list () {
  echo ""
  echo "Instance List:"
  echo ""
  echo "NAME:    " $'\t\t' "HOSTNAME:" $'\t\t' "IP:" $'\t\t\t' "IMAGE:" $'\t\t\t' "STATUS:"
  for i in $(ls -l "$DATACENTER_ROOT" | awk '{print $9}'); do
    if [ -d "$i" ]; then
      t=""
      s=""
      export LOCAL_ROOT="$DATACENTER_ROOT/$i"
      [ ! -z "$(file $LOCAL_ROOT | grep "symbolic link")" ] && export s="^"
      source $LOCAL_ROOT/local.env
      INSTANCE_STATUS="$(/mnt/c/Program\ Files/Oracle/VirtualBox/VBoxManage.exe showvminfo $i 2>/dev/null | grep "State" | cut -d "(" -f 1 | awk '{print $2" "$3}')"
      if [ -z "$INSTANCE_STATUS" ]; then
        INSTANCE_STATUS="-"
      fi
      [ "$(echo -n "$VAGRANT_IMAGE_NAME" | wc -c)" -le "18" ] && t=$'\t'
      echo "$i$s" $'\t\t' "$VAGRANT_INSTANCE_NAME" $'\t\t' "$VAGRANT_IPADDR_PRIVATE" $'\t\t' "$VAGRANT_IMAGE_NAME$t" $'\t' "$INSTANCE_STATUS"
      s=""
    fi
  done
  t=""
  [ "$(echo -n "$VAGRANT_IMAGE_NAME" | wc -c)" -le "17" ] && t=$'\t'
  echo "localhost" $'\t\t' "$HOSTNAME$t" "127.0.0.1" $'\t\t' "$WSL_DISTRO_NAME"
  # print_usage
  echo ""
}

function vgr_instance_actions_list () {
  if [ -d "$DATACENTER_ROOT/$INSTANCE_NAME/runs" ]; then 
    ls "$DATACENTER_ROOT/$INSTANCE_NAME/runs" | grep ".sh" | cut -d "." -f 1 
  fi
}

function vgr_instance () {
  if [ ! -d "$DATACENTER_ROOT/$INSTANCE_NAME" ]; then
    echo "Instance \"$INSTANCE_NAME\" does not exist!!!"
    vgr_instance_list
    exit 0
  fi
  INSTANCE_ACTION_LIST="$(vgr_instance_actions_list)"
  for a in $INSTANCE_ACTION_LIST; do
    [ "$a" == "$INSTANCE_ACTION" ] && INSTANCE_ACTION_EXISTS="true"
  done
  if [ "$INSTANCE_ACTION_EXISTS" ]; then
    $DATACENTER_ROOT/$INSTANCE_NAME/runs/$INSTANCE_ACTION.sh 2>/dev/null
  else
    echo ""
    echo "Instance \"$INSTANCE_NAME\" Actions:"
    echo ""
    vgr_instance_actions_list
    echo ""
    print_usage
    echo ""
  fi
}

#---------------------------------------------------------------------------------------------------------------------------

function vgr_templates_list () {
  echo ""
  echo "Templates:"
  echo ""
  echo "NAME:" $'\t\t\t' "HOSTNAME:" $'\t\t' "IMAGE:"
  for i in $(ls -l "$DATACENTER_ROOT/.templates" | awk '{print $9}'); do
    t=""
    if [ -d "$DATACENTER_ROOT/.templates/$i" ]; then
      source $DATACENTER_ROOT/.templates/$i/local.env
      [ "$(echo -n "$VAGRANT_INSTANCE_NAME" | wc -c)" -le "14" ] && t=$'\t'
      echo "$i$t" $'\t' "$VAGRANT_INSTANCE_NAME$t" $'\t'  "$VAGRANT_IMAGE_NAME"
    fi
  done
  print_usage
  echo ""
}

function vgr_instance_new () {
  if [ -z "$INSTANCE_NAME" ]; then
    echo ""
    echo "New instance name is missing..."
    echo ""
    vgr_templates_list
    echo ""
  elif [ -z "$INSTANCE_TEMPLATE" ] || [ ! -d "$DATACENTER_ROOT/.templates/$INSTANCE_TEMPLATE" ]; then
    echo ""
    echo "New instance template is wrong or missing..."
    echo ""
    vgr_templates_list
    echo ""
  else
    cp -a "$DATACENTER_ROOT/.templates/$INSTANCE_TEMPLATE" "$DATACENTER_ROOT/$INSTANCE_NAME"
    echo ""
    echo "New instance \"$INSTANCE_NAME\" ($INSTANCE_TEMPLATE) is created."
    echo ""
    vgr_instance_list
    echo ""
  fi
}

#---------------------------------------------------------------------------------------------------------------------------

function vgr_instance_remove () {
  if [ -z "$INSTANCE_NAME" ] || [ ! -d "$DATACENTER_ROOT/$INSTANCE_NAME" ]; then
    echo ""
    echo "Wrong usage!!!"
    echo ""
    vgr_instance_list
    print_usage
    echo ""
  else
    "$DATACENTER_ROOT/$INSTANCE_NAME/runs/destroy.sh" && rm -rf "$DATACENTER_ROOT/$INSTANCE_NAME"
    echo ""
    [ ! -d "$DATACENTER_ROOT/$INSTANCE_NAME/.vagrant" ] && echo "Instance \"$INSTANCE_NAME\" is removed."
    echo ""
    vgr_instance_list
    echo ""
  fi
}

#---------------------------------------------------------------------------------------------------------------------------

function vgr_instance_edit () {
  if [ -z "$INSTANCE_NAME" ] || [ ! -d "$DATACENTER_ROOT/$INSTANCE_NAME" ]; then
    echo ""
    echo "Wrong usage!!!"
    echo ""
    vgr_instance_list
    print_usage
    echo ""
  else
    vi "$DATACENTER_ROOT/$INSTANCE_NAME/local.env"
    vgr_instance_list
    echo ""
  fi
}

#---------------------------------------------------------------------------------------------------------------------------

function vgr_instance_unlink () {
  for i in $(ls -l "$DATACENTER_ROOT" | awk '{print $9}'); do
    if [ -d "$i" ]; then
      if [ ! -z "$(file "$DATACENTER_ROOT/$i" | grep "symbolic link")" ]; then
        rm -f "$DATACENTER_ROOT/$i"
      fi
    fi
  done
}

function vgr_instance_link () {
  if [ -d "$DATACENTER_SHARED" ]; then
    for i in $(ls -l "$DATACENTER_SHARED" | awk '{print $9}'); do
      if [ -d "$DATACENTER_SHARED/$i" ]; then
        ln -s "$DATACENTER_SHARED/$i" "$DATACENTER_ROOT/$i"
      fi
    done
  fi
}

#---------------------------------------------------------------------------------------------------------------------------

function vgr_instance_share () {
  if [ -d "$DATACENTER_SHARED" ]; then
    if [ -d "$DATACENTER_ROOT/$INSTANCE_NAME" ] && [ ! -z "$INSTANCE_NAME" ]; then
      mv "$DATACENTER_ROOT/$INSTANCE_NAME" "$DATACENTER_SHARED/"
    fi
  fi
}

function vgr_instance_unshare () {
  if [ -d "$DATACENTER_SHARED" ]; then
    if [ -d "$DATACENTER_SHARED/$INSTANCE_NAME" ] && [ ! -z "$INSTANCE_NAME" ]; then
      mv "$DATACENTER_SHARED/$INSTANCE_NAME" "$DATACENTER_ROOT/"
    fi
  fi
}

#===========================================================================================================================

cd "$DATACENTER_ROOT"

INSTANCE_TEMPLATE="$3"
INSTANCE_NAME="$2"
INSTANCE_ACTION="$1"

case  $1 in
  "share")
    vgr_instance_share $INSTANCE_NAME
    vgr_instance_unlink
    vgr_instance_link
    vgr_instance_list
    ;;
  "unshare")
    vgr_instance_unlink
    vgr_instance_unshare $INSTANCE_NAME
    vgr_instance_link
    vgr_instance_list
    ;;
  "link")
    vgr_instance_unlink
    vgr_instance_link
    vgr_instance_list
    ;;
  "unlink")
    vgr_instance_unlink
    vgr_instance_list
    ;;
  "ssh")
    ssh $INSTANCE_NAME
    ;;
  "templates")
    vgr_templates_list 
    ;;
  "new")
    vgr_instance_new 
    ;;
  "remove")
    vgr_instance_remove 
    ;;
  "edit")
    vgr_instance_edit 
    ;;
  "")
    vgr_instance_list
    print_usage
    ;;
  "list")
    vgr_instance_list
    ;;
  "hosts")
    cat ~/.ssh/config | grep "Host" | grep -v "StrictHostKeyChecking" | grep -v "#"
    echo ""
    ;;
  *)
    if [ "$INSTANCE_NAME" == "" ]; then
      echo "Wrong usage!!!"
      vgr_instance_list
      print_usage
    elif [ "$INSTANCE_NAME" == "localhost" ]; then
      localhost_instance $INSTANCE_ACTION
    else
      vgr_instance $INSTANCE_ACTION $INSTANCE_NAME
    fi
    ;;
esac

#===========================================================================================================================
